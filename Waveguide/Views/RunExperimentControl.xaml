<UserControl x:Class="Waveguide.RunExperimentControl"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:myLocal="clr-namespace:Waveguide"
             xmlns:convert="clr-namespace:Waveguide;assembly=Waveguide"
             xmlns:WpfTools="clr-namespace:WPFTools"
             xmlns:ig="http://schemas.infragistics.com/xaml"
             xmlns:igPrim="http://schemas.infragistics.com/xaml/primitives"             
             xmlns:igDP="http://infragistics.com/DataPresenter"
             xmlns:igEditors="http://infragistics.com/Editors"
             xmlns:sys="clr-namespace:System;assembly=mscorlib"             
             mc:Ignorable="d" 
             d:DesignHeight="600" d:DesignWidth="800">




    <UserControl.Resources>


        <ResourceDictionary>
            <myLocal:BoolToVisibilityConverter x:Key="BoolToVis" />
            <myLocal:BoolToInvertVisibilityConverter x:Key="BoolToInvertVis" />
            <myLocal:ValidationErrorsToStringConverter x:Key="validationErrorToStringConverter"/>
            <myLocal:EnumToBoolConverter x:Key="EnumToBool"/>

            

            <Style x:Key="TrackFillStyle" TargetType="igPrim:TrackFill">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate>
                            <Grid>
                                <Rectangle Height="6" Stroke="DarkGray" Fill="DarkGray"/>
                            </Grid>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style x:Key="TransparentTrackFillStyle" TargetType="igPrim:TrackFill">
                <Setter Property="Background" Value="Transparent"/>
            </Style>

            <Style x:Key="RightThumbStyle" TargetType="ig:XamSliderNumericThumb">
                <Setter Property="InteractionMode" Value="Lock" />
                <Setter Property="TrackFillStyle" Value="{StaticResource TrackFillStyle}" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="ig:XamSliderNumericThumb">
                            <Grid x:Name="RootElement">
                                <VisualStateManager.VisualStateGroups>
                                    <VisualStateGroup x:Name="OrientationStates">
                                        <VisualState x:Name="Horizontal"/>
                                        <VisualState x:Name="Vertical">
                                            <Storyboard>
                                                <ObjectAnimationUsingKeyFrames Storyboard.TargetName="HorizontalThumb" Storyboard.TargetProperty="Visibility">
                                                    <DiscreteObjectKeyFrame KeyTime="00:00:00">
                                                        <DiscreteObjectKeyFrame.Value>
                                                            <Visibility>Collapsed</Visibility>
                                                        </DiscreteObjectKeyFrame.Value>
                                                    </DiscreteObjectKeyFrame>
                                                </ObjectAnimationUsingKeyFrames>
                                                <ObjectAnimationUsingKeyFrames Storyboard.TargetName="VerticalThumb" Storyboard.TargetProperty="Visibility">
                                                    <DiscreteObjectKeyFrame KeyTime="00:00:00">
                                                        <DiscreteObjectKeyFrame.Value>
                                                            <Visibility>Visible</Visibility>
                                                        </DiscreteObjectKeyFrame.Value>
                                                    </DiscreteObjectKeyFrame>
                                                </ObjectAnimationUsingKeyFrames>
                                            </Storyboard>
                                        </VisualState>
                                    </VisualStateGroup>
                                    <VisualStateGroup x:Name="FocusStates">
                                        <VisualState x:Name="Unfocused"/>
                                        <VisualState x:Name="Focused">
                                            <Storyboard>
                                                <DoubleAnimation Duration="0" To="1" Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="DragElem" d:IsOptimized="True"/>
                                                <DoubleAnimation Duration="0" To="1" Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="verticalDragElem" d:IsOptimized="True"/>
                                            </Storyboard>
                                        </VisualState>
                                    </VisualStateGroup>
                                    <VisualStateGroup x:Name="ActiveStates">
                                        <VisualState x:Name="Inactive"/>
                                        <VisualState x:Name="Active">
                                            <Storyboard>
                                                <DoubleAnimation Storyboard.TargetName="HorizontalThumbContent" Storyboard.TargetProperty="Opacity" To="1"/>
                                                <DoubleAnimation Storyboard.TargetName="VerticalThumbContent" Storyboard.TargetProperty="Opacity" To="1"/>
                                                <DoubleAnimation Storyboard.TargetName="OuterBorder" Storyboard.TargetProperty="Opacity" To="0"/>
                                                <DoubleAnimation Storyboard.TargetName="verticalOuterBorder" Storyboard.TargetProperty="Opacity" To="0"/>
                                                <DoubleAnimation Storyboard.TargetName="DragElem" Storyboard.TargetProperty="Opacity" To="1"/>
                                                <DoubleAnimation Storyboard.TargetName="verticalDragElem" Storyboard.TargetProperty="Opacity" To="1"/>
                                            </Storyboard>
                                        </VisualState>
                                    </VisualStateGroup>
                                </VisualStateManager.VisualStateGroups>
                                <ToolTipService.ToolTip>
                                    <ToolTip x:Name="ThumbToolTip" Visibility="{TemplateBinding ToolTipVisibility}" ContentTemplate="{TemplateBinding ToolTipTemplate}"/>
                                </ToolTipService.ToolTip>
                                <Grid x:Name="HorizontalThumb" Margin="-4,4,0,-4">
                                    <Grid x:Name="HorizontalThumbContent" Height="12" Width="8">
                                        <Rectangle x:Name="normalElem" Fill="{TemplateBinding Background}" RadiusY="2" RadiusX="2" Stroke="{TemplateBinding Background}" StrokeThickness="1"/>
                                        <Rectangle x:Name="OuterBorder" RadiusY="2" RadiusX="2" Stroke="#49000000" StrokeThickness="1"/>
                                        <Rectangle x:Name="DragElem" RadiusY="2" RadiusX="2" Stroke="#69000000" StrokeThickness="1" Opacity="0"/>
                                    </Grid>
                                </Grid>
                                <Grid x:Name="VerticalThumb" Visibility="Collapsed" Margin="4,-4,-4,0">
                                    <Grid x:Name="VerticalThumbContent" Height="8" Width="12">
                                        <Rectangle x:Name="verticalnormalElem" Fill="{TemplateBinding Background}" RadiusY="2" RadiusX="2" Stroke="{TemplateBinding Background}" StrokeThickness="1"/>
                                        <Rectangle x:Name="verticalOuterBorder" RadiusY="2" RadiusX="2" Stroke="#49000000" StrokeThickness="1"/>
                                        <Rectangle x:Name="verticalDragElem"  RadiusY="2" RadiusX="2" Stroke="#69000000" StrokeThickness="1" Opacity="0"/>
                                    </Grid>
                                </Grid>
                            </Grid>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
            <Style x:Key="LeftThumbStyle" TargetType="ig:XamSliderNumericThumb">
                <Setter Property="InteractionMode" Value="Lock" />
                <Setter Property="TrackFillStyle" Value="{StaticResource TransparentTrackFillStyle}" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="ig:XamSliderNumericThumb">
                            <Grid x:Name="RootElement">
                                <VisualStateManager.VisualStateGroups>
                                    <VisualStateGroup x:Name="OrientationStates">
                                        <VisualState x:Name="Horizontal"/>
                                        <VisualState x:Name="Vertical">
                                            <Storyboard>
                                                <ObjectAnimationUsingKeyFrames Storyboard.TargetName="HorizontalThumb" Storyboard.TargetProperty="Visibility">
                                                    <DiscreteObjectKeyFrame KeyTime="00:00:00">
                                                        <DiscreteObjectKeyFrame.Value>
                                                            <Visibility>Collapsed</Visibility>
                                                        </DiscreteObjectKeyFrame.Value>
                                                    </DiscreteObjectKeyFrame>
                                                </ObjectAnimationUsingKeyFrames>
                                                <ObjectAnimationUsingKeyFrames Storyboard.TargetName="VerticalThumb" Storyboard.TargetProperty="Visibility">
                                                    <DiscreteObjectKeyFrame KeyTime="00:00:00">
                                                        <DiscreteObjectKeyFrame.Value>
                                                            <Visibility>Visible</Visibility>
                                                        </DiscreteObjectKeyFrame.Value>
                                                    </DiscreteObjectKeyFrame>
                                                </ObjectAnimationUsingKeyFrames>
                                            </Storyboard>
                                        </VisualState>
                                    </VisualStateGroup>
                                    <VisualStateGroup x:Name="FocusStates">
                                        <VisualState x:Name="Unfocused"/>
                                        <VisualState x:Name="Focused">
                                            <Storyboard>
                                                <DoubleAnimation Duration="0" To="1" Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="DragElem" d:IsOptimized="True"/>
                                                <DoubleAnimation Duration="0" To="1" Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="verticalDragElem" d:IsOptimized="True"/>
                                            </Storyboard>
                                        </VisualState>
                                    </VisualStateGroup>
                                    <VisualStateGroup x:Name="ActiveStates">
                                        <VisualState x:Name="Inactive"/>
                                        <VisualState x:Name="Active">
                                            <Storyboard>
                                                <DoubleAnimation Storyboard.TargetName="HorizontalThumbContent" Storyboard.TargetProperty="Opacity" To="1"/>
                                                <DoubleAnimation Storyboard.TargetName="VerticalThumbContent" Storyboard.TargetProperty="Opacity" To="1"/>
                                                <DoubleAnimation Storyboard.TargetName="OuterBorder" Storyboard.TargetProperty="Opacity" To="0"/>
                                                <DoubleAnimation Storyboard.TargetName="verticalOuterBorder" Storyboard.TargetProperty="Opacity" To="0"/>
                                                <DoubleAnimation Storyboard.TargetName="DragElem" Storyboard.TargetProperty="Opacity" To="1"/>
                                                <DoubleAnimation Storyboard.TargetName="verticalDragElem" Storyboard.TargetProperty="Opacity" To="1"/>
                                            </Storyboard>
                                        </VisualState>
                                    </VisualStateGroup>
                                </VisualStateManager.VisualStateGroups>
                                <ToolTipService.ToolTip>
                                    <ToolTip x:Name="ThumbToolTip" Visibility="{TemplateBinding ToolTipVisibility}" ContentTemplate="{TemplateBinding ToolTipTemplate}"/>
                                </ToolTipService.ToolTip>
                                <Grid x:Name="HorizontalThumb" Margin="-4,4,0,0">
                                    <Grid x:Name="HorizontalThumbContent" Height="12" Width="8">
                                        <Rectangle x:Name="normalElem" Fill="{TemplateBinding Background}" RadiusY="2" RadiusX="2" Stroke="{TemplateBinding Background}" StrokeThickness="1"/>
                                        <Rectangle x:Name="OuterBorder" RadiusY="2" RadiusX="2" Stroke="#49000000" StrokeThickness="1"/>
                                        <Rectangle x:Name="DragElem" RadiusY="2" RadiusX="2" Stroke="#69000000" StrokeThickness="1" Opacity="0"/>
                                    </Grid>
                                </Grid>
                                <Grid x:Name="VerticalThumb" Visibility="Collapsed" Margin="4,-4,-4,0">
                                    <Grid x:Name="VerticalThumbContent" Height="8" Width="12">
                                        <Rectangle x:Name="verticalnormalElem" Fill="{TemplateBinding Background}" RadiusY="2" RadiusX="2" Stroke="{TemplateBinding Background}" StrokeThickness="1"/>
                                        <Rectangle x:Name="verticalOuterBorder" RadiusY="2" RadiusX="2" Stroke="#59FFFFFF" StrokeThickness="1"/>
                                        <Rectangle x:Name="verticalDragElem"  RadiusY="2" RadiusX="2" Stroke="#69000000" StrokeThickness="1" Opacity="0"/>
                                    </Grid>
                                </Grid>
                            </Grid>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>



            <Style x:Key="OptimizeButtonTemplate" TargetType="{x:Type igDP:CellValuePresenter}">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type igDP:CellValuePresenter}">
                            <Grid Width="{TemplateBinding Width}" Height="{TemplateBinding Height}">
                                <Button x:Name="VerifyPB" Margin="5,5,5,5" Click="VerifyPB_Click">
                                    <Button.Style>
                                        <Style TargetType="Button">
                                            <!-- Set the default value here (if any) if you set it directly on the button that will override the trigger -->
                                            <Setter Property="Background" Value="Red" />
                                            <Setter Property="Content" Value="Unverified"/>
                                            <Setter Property="Foreground" Value="Black"/>
                                            <Style.Triggers>
                                                <DataTrigger Binding="{Binding Path=DataItem.Verified}" Value="True">
                                                    <Setter Property="Background" Value="Green" />
                                                    <Setter Property="Content" Value="Verified"/>
                                                    <Setter Property="Foreground" Value="White"/>
                                                </DataTrigger>
                                            </Style.Triggers>
                                        </Style>
                                    </Button.Style>
                                </Button>
                            </Grid>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>


        


            <DoubleAnimation x:Key="RotateAnimation" 
                             Storyboard.TargetProperty="(UIElement.RenderTransform).(RotateTransform.Angle)" 
                             From="0" To="360" BeginTime="00:00:00.000" Duration="00:00:02.000" RepeatBehavior="Forever"/>

        </ResourceDictionary>

    </UserControl.Resources>




    <Grid Name="MainGrid" IsHitTestVisible="True">
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="*"/>
            <ColumnDefinition Width="5"/>
            <ColumnDefinition Width="*"/>
        </Grid.ColumnDefinitions>
        
        <!-- LEFT Panel -->

        <WpfTools:MultiChartArray Grid.Column="0" x:Name="MyMultiChartArray"/>
        
        
        <!-- Grid Splitter -->
        <GridSplitter Grid.Column="1" 
                    HorizontalAlignment="Stretch" 
                    VerticalAlignment="Stretch"              
                    Background="DarkGray"
                    Width="5"/>

        
        
        <!-- RIGHT Panel -->
        <Grid Grid.Column="2" HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
            <Grid.RowDefinitions>
                <RowDefinition Height="*"/>
                <RowDefinition Height="5"/>
                <RowDefinition Height="*"/>
                <RowDefinition Height="100"/>
            </Grid.RowDefinitions>

            <!-- TOP Panel -->
            <WpfTools:AggregateChart Grid.Row="0" x:Name="MyAggregateChart" HorizontalAlignment="Stretch" VerticalAlignment="Stretch"/>

            
            
            
            <!-- Grid Splitter -->
            <GridSplitter Grid.Row="1"
                    HorizontalAlignment="Stretch" 
                    VerticalAlignment="Stretch"              
                    Background="DarkGray"                          
                    Height="5"/>

            <!-- ************************************************************* -->
            <!-- ************************************************************* -->
            <!-- BOTTOM Panel - Verify DataGrid -->
            <Grid Grid.Row="2" Grid.RowSpan="1" Panel.ZIndex="1">
                 
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="*"/>
                    <RowDefinition Height="*"/>
                </Grid.RowDefinitions>

                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*"/>
                </Grid.ColumnDefinitions>
                
                <Grid.Style>
                    <Style TargetType="{x:Type Grid}">
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding Path=RunState}" Value="{x:Static myLocal:ViewModel_RunExperimentControl+RUN_STATE.NEEDS_INPUT}">
                                <Setter Property="Visibility" Value="Visible"/>
                            </DataTrigger>
                            <DataTrigger Binding="{Binding Path=RunState}" Value="{x:Static myLocal:ViewModel_RunExperimentControl+RUN_STATE.READY_TO_RUN}">
                                <Setter Property="Visibility" Value="Visible"/>
                            </DataTrigger>
                            <DataTrigger Binding="{Binding Path=RunState}" Value="{x:Static myLocal:ViewModel_RunExperimentControl+RUN_STATE.RUNNING}">
                                <Setter Property="Visibility" Value="Collapsed"/>
                            </DataTrigger>
                            <DataTrigger Binding="{Binding Path=RunState}" Value="{x:Static myLocal:ViewModel_RunExperimentControl+RUN_STATE.RUN_FINISHED}">
                                <Setter Property="Visibility" Value="Collapsed"/>
                            </DataTrigger>
                            <DataTrigger Binding="{Binding Path=RunState}" Value="{x:Static myLocal:ViewModel_RunExperimentControl+RUN_STATE.RUN_ABORTED}">
                                <Setter Property="Visibility" Value="Visible"/>
                            </DataTrigger>
                            <!--<DataTrigger Binding="{Binding Path=RunningAutoVerify,UpdateSourceTrigger=PropertyChanged}" Value="True">
                                <Setter Property="Visibility" Value="Collapsed"/>
                            </DataTrigger>
                            <DataTrigger Binding="{Binding Path=RunningAutoVerify,UpdateSourceTrigger=PropertyChanged}" Value="False">
                                <Setter Property="Visibility" Value="Visible"/>
                            </DataTrigger>-->
                        </Style.Triggers>
                    </Style>
                </Grid.Style>


                <!-- Experiment Plate Barcode Entry and Binning GroupBox -->
                <Grid Grid.Column="0" Grid.Row="0" Grid.ColumnSpan="2" Margin="2,10,2,0">
                    <Grid.RowDefinitions>
                        <RowDefinition Height="100"/>
                    </Grid.RowDefinitions>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="150"/>
                        <ColumnDefinition Width="150"/>
                        <ColumnDefinition Width="Auto"/>
                        <ColumnDefinition Width="Auto"/>
                        <ColumnDefinition Width="Auto"/>
                        <ColumnDefinition Width="*"/>
                    </Grid.ColumnDefinitions>

                    <Image Grid.Column="2" Grid.Row="0" Height="24" Width="24" HorizontalAlignment="Left" VerticalAlignment="Center" Margin="5,0,10,0" >
                        <Image.Style>
                            <Style TargetType="{x:Type Image}">
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding Path=ExpParams.experimentPlate.BarcodeValid}" Value="False">
                                        <Setter Property="Source" Value="/Images/red_arrow_left_small.png"/>
                                    </DataTrigger>
                                    <DataTrigger Binding="{Binding Path=ExpParams.experimentPlate.BarcodeValid}" Value="True">
                                        <Setter Property="Source" Value="/Images/green_check_small.png"/>
                                    </DataTrigger>
                                    <MultiDataTrigger>
                                        <MultiDataTrigger.Conditions>
                                            <Condition Binding="{Binding Path=ExpParams.method.IsAuto}" Value="True" />
                                            <Condition Binding="{Binding Path=ExpParams.experimentPlate.PlateIDResetBehavior}" Value="{x:Static myLocal:PLATE_ID_RESET_BEHAVIOR.VWORKS}" />
                                        </MultiDataTrigger.Conditions>
                                        <Setter Property="Source" Value="/Images/green_check_small.png"/>                                      
                                    </MultiDataTrigger>                                    
                                </Style.Triggers>
                            </Style>
                        </Image.Style>
                    </Image>

                    <Label Content="Image Plate Barcode:" Grid.Column="0" Grid.Row="0"
                           VerticalAlignment="Center" HorizontalAlignment="Right"/>


                    <TextBox Grid.Column="1" Grid.Row="0" x:Name="ImagePlateBarcodeTextBox" Height="30" Width="150" VerticalAlignment="Center" 
                             VerticalContentAlignment="Center"
		                    Text="{Binding Path=ExpParams.experimentPlate.Barcode,UpdateSourceTrigger=PropertyChanged,NotifyOnValidationError=True,ValidatesOnDataErrors=True}">
                        <TextBox.Style>
                            <Style TargetType="{x:Type TextBox}">
                                <Style.Triggers>
                                    <Trigger Property="Validation.HasError" Value="True">
                                        <Setter Property="Background" Value="#20FF0000"/>
                                        <Setter Property="ToolTip" Value="{Binding RelativeSource={x:Static RelativeSource.Self}, Path=(Validation.Errors)[0].ErrorContent}"/>
                                    </Trigger>
                                    <DataTrigger Binding="{Binding Path=ExpParams.method.IsAuto}" Value="True">
                                        <Setter Property="Background" Value="#20777777"/>
                                        <Setter Property="ToolTip" Value="Barcode to be provided by VWorks during experiment run"/>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </TextBox.Style>
                    </TextBox>

                    <GroupBox Grid.Row="0" Grid.Column="3" HorizontalAlignment="Center" VerticalAlignment="Center"
                              Header="Reset Behavior" FontSize="14" 
                              BorderBrush="Black" BorderThickness="1" Margin="3"
                              IsEnabled="True" >
                        <StackPanel Orientation="Horizontal">
                            <RadioButton Content="Constant" x:Name="ImagePlateBarcode_ConstantRB"  HorizontalAlignment="Center" IsChecked="True" Checked="ImagePlateBarcode_ConstantRB_Checked" Margin="5,2,0,2"/>
                            <RadioButton Content="Increment" x:Name="ImagePlateBarcode_IncrementRB" HorizontalAlignment="Center" Checked="ImagePlateBarcode_IncrementRB_Checked" Margin="5,2,0,2"/>
                            <RadioButton Content="Clear" x:Name="ImagePlateBarcode_ClearRB" HorizontalAlignment="Center" Checked="ImagePlateBarcode_ClearRB_Checked" Margin="5,2,0,2">
                                <RadioButton.Style>
                                    <Style TargetType="{x:Type RadioButton}">
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding Path=ExpParams.method.IsAuto}" Value="False">
                                                <Setter Property="Visibility" Value="Visible"/>
                                            </DataTrigger>
                                            <DataTrigger Binding="{Binding Path=ExpParams.method.IsAuto}" Value="True">
                                                <Setter Property="Visibility" Value="Collapsed"/>
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </RadioButton.Style>
                            </RadioButton>
                            <RadioButton Content="VWorks" x:Name="ImagePlateBarcode_VWorksRB" HorizontalAlignment="Center" Checked="ImagePlateBarcode_VWorksRB_Checked" Margin="5,2,0,2">
                                <RadioButton.Style>
                                    <Style TargetType="{x:Type RadioButton}">
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding Path=ExpParams.method.IsAuto}" Value="False">
                                                <Setter Property="Visibility" Value="Collapsed"/>
                                            </DataTrigger>
                                            <DataTrigger Binding="{Binding Path=ExpParams.method.IsAuto}" Value="True">
                                                <Setter Property="Visibility" Value="Visible"/>
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </RadioButton.Style>
                            </RadioButton>
                        </StackPanel>
                    </GroupBox>


                    <GroupBox Grid.Row="0" Grid.Column="4" HorizontalAlignment="Center" VerticalAlignment="Center" Margin="32,0,0,0"
                          Header="Plate Count" BorderBrush="Black" BorderThickness="1" FontSize="14" x:Name="PlateCountGroupBox">
                        
                        <StackPanel Orientation="Horizontal"> 
                            <TextBlock Text="Total Plates to Run:" Width="120" HorizontalAlignment="Right" VerticalAlignment="Center"/>
                            <ig:XamNumericInput Grid.Row="1" SpinIncrement="1" SpinButtonDisplayMode="Always"
                               Width="50" 
                               HorizontalAlignment="Center" VerticalAlignment="Top" 
                               Mask="{}{number:1-99}" ValueType="sys:Int32"
                               Value="{Binding Path=ExpParams.experimentRunPlateCount,UpdateSourceTrigger=PropertyChanged}" />

                            <!--<TextBlock Text="Current Plate:" Width="120" HorizontalAlignment="Right" VerticalAlignment="Center"/>
                            <ig:XamNumericInput Grid.Row="1" SpinIncrement="1" SpinButtonDisplayMode="Never"
                               Width="50" 
                               HorizontalAlignment="Center" VerticalAlignment="Top" 
                               Mask="{}{number:0-99}" ValueType="sys:Int32"
                               Value="{Binding Path=ExpParams.experimentCurrentPlateNumber,UpdateSourceTrigger=PropertyChanged}" />-->
                        </StackPanel>
                        
                        <GroupBox.Style>
                            <Style TargetType="{x:Type GroupBox}">
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding Path=ExpParams.method.IsAuto}" Value="False">
                                        <Setter Property="Visibility" Value="Collapsed"/>
                                    </DataTrigger>
                                    <DataTrigger Binding="{Binding Path=ExpParams.method.IsAuto}" Value="True">
                                        <Setter Property="Visibility" Value="Visible"/>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </GroupBox.Style>
                    </GroupBox>



                </Grid>
          
                
               
                

                <igDP:XamDataGrid Grid.Column="0" Grid.Row="1" x:Name="CompoundPlateDataGrid"                                                      
                              CellUpdated="CompoundPlateDataGrid_CellUpdated"
                              DataSource="{Binding Path=ExpParams.compoundPlateList}" Margin="5" Theme="IGTheme">
                    <!-- Row for each CompoundPlate in the selected method, Columns: Description, Exposure  -->

               
                    <igDP:XamDataGrid.Resources>
                        <myLocal:BindingProxy x:Key="proxy" Data="{Binding}" />
                        <myLocal:EnumToBoolConverter x:Key="IDResetTypeConverter" />
                        <myLocal:ResetTypeToBooleanConverter x:Key="IDResetTypeConverter2"/>
                    </igDP:XamDataGrid.Resources>


                    <igDP:XamDataGrid.FieldLayoutSettings>
                        <igDP:FieldLayoutSettings 
                            AllowAddNew="False" 
                            AllowDelete="False"
                            AutoGenerateFields="False"
                            SupportDataErrorInfo="RecordsAndCells" 
                            DataErrorDisplayMode="Highlight"/>
                    </igDP:XamDataGrid.FieldLayoutSettings>

                    <igDP:XamDataGrid.FieldSettings>
                        <igDP:FieldSettings DataItemUpdateTrigger="OnCellValueChange" AllowEdit="True"  />
                    </igDP:XamDataGrid.FieldSettings>

                    <igDP:XamDataGrid.FieldLayouts>
                        <igDP:FieldLayout IsDefault="True">
                            <igDP:FieldLayout.Fields>

                                <igDP:Field Name="Description" Label="Compound Plate" Width="Auto" >
                                    <igDP:Field.Settings>
                                        <igDP:FieldSettings AllowEdit="False"/>
                                    </igDP:Field.Settings>
                                </igDP:Field>

                                <igDP:Field Name="Barcode" Label="Barcode">
                                    <igDP:Field.Settings>
                                        <igDP:FieldSettings AllowEdit="True">
                                            <igDP:FieldSettings.CellValuePresenterStyle>
                                                <Style  TargetType="{x:Type igDP:CellValuePresenter}">
                                                    <Setter Property="Template">
                                                        <Setter.Value>
                                                            <ControlTemplate TargetType="{x:Type igDP:CellValuePresenter}">
                                                                <Grid Width="{TemplateBinding Width}">
                                                                    <TextBox Name="CompoundPlateBarcodeTextBox" Text="{Binding Path=DataItem.Barcode,UpdateSourceTrigger=PropertyChanged,NotifyOnValidationError=True,ValidatesOnDataErrors=True}">
                                                                        <TextBox.Style>
                                                                            <Style TargetType="{x:Type TextBox}">
                                                                                <Style.Triggers>
                                                                                    <Trigger Property="Validation.HasError" Value="True">
                                                                                        <Setter Property="Background" Value="#20FF0000"/>
                                                                                        <Setter Property="ToolTip" Value="{Binding RelativeSource={x:Static RelativeSource.Self}, Path=(Validation.Errors)[0].ErrorContent}"/>
                                                                                    </Trigger>
                                                                                    <DataTrigger Binding="{Binding Path=Data.ExpParams.method.IsAuto,Source={StaticResource proxy}}" Value="True">
                                                                                        <Setter Property="Background" Value="#20777777"/>
                                                                                        <Setter Property="ToolTip" Value="Barcode to be provided by VWorks during experiment run"/>
                                                                                    </DataTrigger>
                                                                                </Style.Triggers>
                                                                                <Setter Property="Margin" Value="0,1,0,1"/>
                                                                            </Style>
                                                                        </TextBox.Style>

                                                                    </TextBox>
                                                                </Grid>
                                                            </ControlTemplate>
                                                        </Setter.Value>
                                                    </Setter>                                                    
                                                </Style>
                                            </igDP:FieldSettings.CellValuePresenterStyle>
                                        </igDP:FieldSettings>
                                    </igDP:Field.Settings>
                                </igDP:Field>


                                <!--  XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX -->

                                <igDP:UnboundField Label=" ">
                                    <igDP:UnboundField.Settings>
                                        <igDP:FieldSettings
                                              AllowEdit="False" 
                                              AllowGroupBy="False" 
                                              AllowResize="False" 
                                              AllowSummaries="False"
                                              LabelClickAction="Nothing"
                                              LabelMaxWidth="45" CellMaxWidth="45"
                                              >
                                            <igDP:FieldSettings.CellValuePresenterStyle>
                                                <Style TargetType="{x:Type igDP:CellValuePresenter}">
                                                    <Setter Property="Template">
                                                        <Setter.Value>
                                                            <ControlTemplate TargetType="{x:Type igDP:CellValuePresenter}">

                                                                <Grid HorizontalAlignment="Center">
                                                                    <Image x:Name="ValidIcon" ToolTip="Barcode Valid" Source="/Images/green_check_small.png" Width="24" Height="24" />
                                                                    <Image x:Name="InvalidIcon" ToolTip="Barcode Invalid" Source="/Images/red_arrow_left_small.png" Width="24" Height="24" />
                                                                </Grid>

                                                                <!-- These triggers hide the icons that do not apply to a person. -->
                                                                <ControlTemplate.Triggers>
                                                                    <DataTrigger Binding="{Binding Path=DataItem.BarcodeValid}" Value="False">
                                                                        <Setter TargetName="ValidIcon" Property="Visibility" Value="Hidden" />
                                                                        <Setter TargetName="InvalidIcon" Property="Visibility" Value="Visible" />
                                                                    </DataTrigger>
                                                                    <DataTrigger Binding="{Binding Path=DataItem.BarcodeValid}" Value="True">
                                                                        <Setter TargetName="ValidIcon" Property="Visibility" Value="Visible" />
                                                                        <Setter TargetName="InvalidIcon" Property="Visibility" Value="Hidden" />
                                                                    </DataTrigger>
                                                                    
                                                                    <MultiDataTrigger>
                                                                        <MultiDataTrigger.Conditions>
                                                                            <Condition Binding="{Binding Path=Data.ExpParams.method.IsAuto,Source={StaticResource proxy}}" Value="True" />
                                                                            <Condition Binding="{Binding Path=DataItem.PlateIDResetBehavior}" Value="{x:Static myLocal:PLATE_ID_RESET_BEHAVIOR.VWORKS}" />
                                                                        </MultiDataTrigger.Conditions>
                                                                        <Setter TargetName="ValidIcon" Property="Visibility" Value="Visible" />
                                                                        <Setter TargetName="InvalidIcon" Property="Visibility" Value="Hidden" />
                                                                    </MultiDataTrigger>

                                                                </ControlTemplate.Triggers>
                                                            </ControlTemplate>
                                                        </Setter.Value>
                                                    </Setter>
                                                </Style>
                                            </igDP:FieldSettings.CellValuePresenterStyle>
                                        </igDP:FieldSettings>
                                    </igDP:UnboundField.Settings>
                                </igDP:UnboundField>


                                <igDP:Field Name="PlateIDResetBehavior" Label="Reset Behavior" Width="400" >
                                   
                                    <igDP:Field.Settings>                                        
                                        <igDP:FieldSettings
                                             AllowEdit="True" 
                                              AllowGroupBy="False" 
                                              AllowResize="False" 
                                              AllowSummaries="False"
                                              LabelClickAction="Nothing"
                                             DataItemUpdateTrigger="OnCellValueChange"
                                              LabelMaxWidth="400" CellMaxWidth="400">

                                            <igDP:FieldSettings.CellValuePresenterStyle>
                                                <Style TargetType="{x:Type igDP:CellValuePresenter}">
                                                    <Setter Property="Template">
                                                        <Setter.Value>
                                                            <ControlTemplate>
                                                                
                                                                <StackPanel Orientation="Horizontal" VerticalAlignment="Center">

                                                                    <RadioButton Content="Constant" x:Name="CompoundPlateBarcode_ConstantRB"  HorizontalAlignment="Center" Checked="CompoundPlateBarcode_ConstantRB_Checked"  Margin="5,2,0,2" 
                                                                                 IsChecked="{Binding Path=Value, Converter={StaticResource IDResetTypeConverter2}, ConverterParameter=rbConstant, RelativeSource={RelativeSource TemplatedParent}}"
                                                                        GroupName="{Binding Path=Index}"/>
                                                                    
                                                                    <RadioButton Content="Increment" x:Name="CompoundPlateBarcode_IncrementRB" HorizontalAlignment="Center" Checked="CompoundPlateBarcode_IncrementRB_Checked"  Margin="5,2,0,2"
                                                                                 IsChecked="{Binding Path=Value, Converter={StaticResource IDResetTypeConverter2}, ConverterParameter=rbIncrement, RelativeSource={RelativeSource TemplatedParent}}"
                                                                                 GroupName="{Binding Path=Index}"/>
                                                                    
                                                                    <RadioButton Content="Clear" x:Name="CompoundPlateBarcode_ClearRB" HorizontalAlignment="Center" Checked="CompoundPlateBarcode_ClearRB_Checked"  Margin="5,2,0,2"
                                                                                 IsChecked="{Binding Path=Value, Converter={StaticResource IDResetTypeConverter2}, ConverterParameter=rbClear, RelativeSource={RelativeSource TemplatedParent}}"
                                                                                 GroupName="{Binding Path=Index}">
                                                                        <RadioButton.Style>
                                                                            <Style TargetType="{x:Type RadioButton}">
                                                                                <Style.Triggers>
                                                                                    <DataTrigger Binding="{Binding Path=Data.ExpParams.method.IsAuto,Source={StaticResource proxy}}" Value="False">
                                                                                        <Setter Property="Visibility" Value="Visible"/>
                                                                                    </DataTrigger>
                                                                                    <DataTrigger Binding="{Binding Path=Data.ExpParams.method.IsAuto,Source={StaticResource proxy}}" Value="True">
                                                                                        <Setter Property="Visibility" Value="Collapsed"/>
                                                                                    </DataTrigger>
                                                                                </Style.Triggers>
                                                                            </Style>
                                                                        </RadioButton.Style>
                                                                    </RadioButton>
                                                                    
                                                                    <RadioButton Content="VWorks" x:Name="CompoundPlateBarcode_VWorksRB" HorizontalAlignment="Center" Checked="CompoundPlateBarcode_VWorksRB_Checked"  Margin="5,2,0,2"
                                                                                 IsChecked="{Binding Path=Value, Converter={StaticResource IDResetTypeConverter2}, ConverterParameter=rbVWorks, RelativeSource={RelativeSource TemplatedParent}}"
                                                                                 GroupName="{Binding Path=Index}">
                                                                        <RadioButton.Style>
                                                                            <Style TargetType="{x:Type RadioButton}">
                                                                                <Style.Triggers>
                                                                                    <DataTrigger Binding="{Binding Path=Data.ExpParams.method.IsAuto,Source={StaticResource proxy}}" Value="False">
                                                                                        <Setter Property="Visibility" Value="Collapsed"/>
                                                                                    </DataTrigger>
                                                                                    <DataTrigger Binding="{Binding Path=Data.ExpParams.method.IsAuto,Source={StaticResource proxy}}" Value="True">
                                                                                        <Setter Property="Visibility" Value="Visible"/>
                                                                                    </DataTrigger>
                                                                                </Style.Triggers>
                                                                            </Style>
                                                                        </RadioButton.Style>
                                                                    </RadioButton>
                                                                    
                                                                </StackPanel>
                                                        
                                                            </ControlTemplate>
                                                        </Setter.Value>
                                                    </Setter>
                                                </Style>
                                            </igDP:FieldSettings.CellValuePresenterStyle>

                                        </igDP:FieldSettings>
                                    </igDP:Field.Settings>
                                </igDP:Field>

                            </igDP:FieldLayout.Fields>
                        </igDP:FieldLayout>
                    </igDP:XamDataGrid.FieldLayouts>

                </igDP:XamDataGrid>


                <igDP:XamDataGrid Grid.Column="0" Grid.Row="2" x:Name="IndicatorDataGrid" 
                                  DataSource="{Binding Path=ExpParams.indicatorList}" Margin="5" Theme="IGTheme">
                    <!-- Row for each Indicator in the selected method, Columns: Description, Exposure  -->

                    <igDP:XamDataGrid.Resources>
                        <myLocal:BindingProxy x:Key="proxy" Data="{Binding}" />                        
                    </igDP:XamDataGrid.Resources>


                    <igDP:XamDataGrid.FieldLayoutSettings>
                        <igDP:FieldLayoutSettings  
                            AllowAddNew="False" 
                            AllowDelete="False"
                            AutoGenerateFields="False"/>
                    </igDP:XamDataGrid.FieldLayoutSettings>

                    <igDP:XamDataGrid.FieldSettings>
                        <igDP:FieldSettings DataItemUpdateTrigger="OnCellValueChange" AllowEdit="True"  />
                    </igDP:XamDataGrid.FieldSettings>

                    <igDP:XamDataGrid.FieldLayouts>
                        <igDP:FieldLayout IsDefault="True">
                            <igDP:FieldLayout.Fields>

                                <igDP:Field Name="Description" Label="Indicator">
                                    <igDP:Field.CellValuePresenterStyle>
                                        <Style TargetType="{x:Type igDP:CellValuePresenter}">
                                            <Setter Property="HorizontalContentAlignment" Value="Center"/>
                                        </Style>
                                    </igDP:Field.CellValuePresenterStyle>
                                    <igDP:Field.Settings>
                                        <igDP:FieldSettings AllowEdit="False" LabelTextAlignment="Center"/>
                                    </igDP:Field.Settings>
                                </igDP:Field>

                                <igDP:Field Name="Exposure" Label="Exposure" Width="Auto">
                                    <igDP:Field.Settings>
                                        <igDP:FieldSettings EditAsType="{x:Type sys:Int32}" LabelTextAlignment="Center">
                                            <igDP:FieldSettings.EditorStyle>
                                                <Style TargetType="{x:Type igEditors:XamNumericEditor}" >
                                                    <Setter Property="Mask" Value="nnnnn" />
                                                    <Setter Property="HorizontalContentAlignment" Value="Center"/>
                                                </Style>
                                            </igDP:FieldSettings.EditorStyle>
                                        </igDP:FieldSettings>
                                    </igDP:Field.Settings>
                                </igDP:Field>

                                <igDP:Field Name="CycleTime" Label="Cycle Tm" Width="Auto">
                                    <igDP:Field.Settings>
                                        <igDP:FieldSettings EditAsType="{x:Type sys:Int32}" LabelTextAlignment="Center">
                                            <igDP:FieldSettings.EditorStyle>
                                                <Style TargetType="{x:Type igEditors:XamNumericEditor}" >
                                                    <Setter Property="Mask" Value="nnnnn" />
                                                    <Setter Property="HorizontalContentAlignment" Value="Center"/> 
                                                    <Setter Property="IsReadOnly" Value="False"/>
                                                </Style>
                                            </igDP:FieldSettings.EditorStyle>
                                        </igDP:FieldSettings>
                                    </igDP:Field.Settings>
                                </igDP:Field>

                                <igDP:Field Name="Gain" Label="Gain" Width="Auto">
                                    <igDP:Field.Settings>
                                        <igDP:FieldSettings EditAsType="{x:Type sys:Int32}" LabelTextAlignment="Center">
                                            <igDP:FieldSettings.EditorStyle>
                                                <Style TargetType="{x:Type igEditors:XamNumericEditor}" >
                                                    <Setter Property="Mask" Value="nnn" />
                                                    <Setter Property="HorizontalContentAlignment" Value="Center"/>
                                                </Style>
                                            </igDP:FieldSettings.EditorStyle>
                                        </igDP:FieldSettings>
                                    </igDP:Field.Settings>
                                </igDP:Field>


                                <igDP:Field Name="ExcitationFilterDesc" Label="Excitation Filter">
                                    <igDP:Field.CellValuePresenterStyle>
                                        <Style TargetType="{x:Type igDP:CellValuePresenter}">
                                            <Setter Property="HorizontalContentAlignment" Value="Center"/>
                                        </Style>
                                    </igDP:Field.CellValuePresenterStyle>
                                    <igDP:Field.Settings>
                                        <igDP:FieldSettings AllowEdit="False" LabelTextAlignment="Center" />
                                    </igDP:Field.Settings>
                                </igDP:Field>

                                <igDP:Field Name="EmissionFilterDesc" Label="Emission Filter">
                                    <igDP:Field.CellValuePresenterStyle>
                                        <Style TargetType="{x:Type igDP:CellValuePresenter}">
                                            <Setter Property="HorizontalContentAlignment" Value="Center"/>
                                        </Style>
                                    </igDP:Field.CellValuePresenterStyle>                                 
                                    <igDP:Field.Settings>
                                        <igDP:FieldSettings AllowEdit="False" LabelTextAlignment="Center" />
                                    </igDP:Field.Settings>
                                </igDP:Field>

                                <igDP:Field Name="FlatFieldCorrection" Label="Flat Field">
                                    <igDP:Field.CellValuePresenterStyle>
                                        <Style TargetType="{x:Type igDP:CellValuePresenter}">
                                            <Setter Property="HorizontalContentAlignment" Value="Center"/>
                                        </Style>
                                    </igDP:Field.CellValuePresenterStyle>
                                    <igDP:Field.Settings>
                                        <igDP:FieldSettings AllowEdit="False" LabelTextAlignment="Center"/>
                                    </igDP:Field.Settings>
                                </igDP:Field>
                                

                                <!--<igDP:UnboundField Name="VerifyIndicator" Label="Verify" Column="5" Height="45" Width="80">
                                    <igDP:UnboundField.Settings>
                                        <igDP:FieldSettings CellValuePresenterStyle="{StaticResource OptimizeButtonTemplate}" CellHeight="12" CellWidth="30" LabelTextAlignment="Center">
                                        </igDP:FieldSettings>
                                    </igDP:UnboundField.Settings>
                                </igDP:UnboundField>-->


                                <igDP:UnboundField Name="VerifyIndicator" Label="Verify" Column="5" Height="45" Width="80">
                                    <igDP:UnboundField.Settings>
                                        <igDP:FieldSettings CellHeight="12" CellWidth="30" LabelTextAlignment="Center">
                                            <igDP:FieldSettings.CellValuePresenterStyle>
                                                <Style TargetType="{x:Type igDP:CellValuePresenter}">
                                                    <Setter Property="Template">
                                                        <Setter.Value>
                                                            <ControlTemplate TargetType="{x:Type igDP:CellValuePresenter}">
                                                                <Grid Width="{TemplateBinding Width}" Height="{TemplateBinding Height}">
                                                                    <Button x:Name="VerifyPB" Margin="5,5,5,5" Click="VerifyPB_Click">
                                                                        <Button.Style>
                                                                            <Style TargetType="Button">
                                                                                <!-- Set the default value here (if any) if you set it directly on the button that will override the trigger -->
                                                                                <Setter Property="Background" Value="Red" />
                                                                                <Setter Property="Content" Value="Unverified"/>
                                                                                <Setter Property="Foreground" Value="Black"/>
                                                                                <Style.Triggers>
                                                                                    <DataTrigger Binding="{Binding Path=DataItem.Verified}" Value="True">
                                                                                        <Setter Property="Background" Value="Green" />
                                                                                        <Setter Property="Content" Value="Verified"/>
                                                                                        <Setter Property="Foreground" Value="White"/>
                                                                                    </DataTrigger>
                                                                                    <DataTrigger Binding="{Binding Path=Data.ExpParams.method.IsAuto,Source={StaticResource proxy}}" Value="True">
                                                                                        <Setter Property="Background" Value="Gray" />
                                                                                        <Setter Property="Content" Value="Auto"/>
                                                                                        <Setter Property="Foreground" Value="Black"/>
                                                                                        <Setter Property="IsEnabled" Value="False"/>
                                                                                    </DataTrigger>
                                                                                </Style.Triggers>
                                                                            </Style>
                                                                        </Button.Style>
                                                                    </Button>
                                                                </Grid>
                                                            </ControlTemplate>
                                                        </Setter.Value>
                                                    </Setter>
                                                </Style>
                                            </igDP:FieldSettings.CellValuePresenterStyle>
                                        </igDP:FieldSettings>
                                    </igDP:UnboundField.Settings>
                                </igDP:UnboundField>


                 
                                <igDP:UnboundField Label=" ">
                                    <igDP:UnboundField.Settings>
                                        <igDP:FieldSettings
                                              AllowEdit="False" 
                                              AllowGroupBy="False" 
                                              AllowResize="False" 
                                              AllowSummaries="False"
                                              LabelClickAction="Nothing"
                                              LabelMaxWidth="45" CellMaxWidth="45"
                                              >
                                            <igDP:FieldSettings.CellValuePresenterStyle>
                                                <Style TargetType="{x:Type igDP:CellValuePresenter}">
                                                    <Setter Property="Template">
                                                        <Setter.Value>
                                                            <ControlTemplate TargetType="{x:Type igDP:CellValuePresenter}">

                                                                <Grid HorizontalAlignment="Center">
                                                                    <Image x:Name="ValidIcon" ToolTip="Barcode Valid" Source="/Images/green_check_small.png" Width="24" Height="24" />
                                                                    <Image x:Name="InvalidIcon" ToolTip="Barcode Invalid" Source="/Images/red_arrow_left_small.png" Width="24" Height="24" />
                                                                </Grid>

                                                                <!--These triggers hide the icons that do not apply to a person.-->
                                                                <ControlTemplate.Triggers>
                                                                    <DataTrigger Binding="{Binding Path=DataItem.Verified}" Value="False">
                                                                        <Setter TargetName="ValidIcon" Property="Visibility" Value="Hidden" />
                                                                        <Setter TargetName="InvalidIcon" Property="Visibility" Value="Visible" />
                                                                    </DataTrigger>
                                                                    <DataTrigger Binding="{Binding Path=DataItem.Verified}" Value="True">
                                                                        <Setter TargetName="ValidIcon" Property="Visibility" Value="Visible" />
                                                                        <Setter TargetName="InvalidIcon" Property="Visibility" Value="Hidden" />
                                                                    </DataTrigger>


                                                                    <DataTrigger Binding="{Binding Path=Data.ExpParams.method.IsAuto,Source={StaticResource proxy}}" Value="True">
                                                                        <Setter TargetName="ValidIcon" Property="Visibility" Value="Visible" />
                                                                        <Setter TargetName="InvalidIcon" Property="Visibility" Value="Hidden" />
                                                                    </DataTrigger>
                                                                  
                                                                </ControlTemplate.Triggers>
                                                            </ControlTemplate>
                                                        </Setter.Value>
                                                    </Setter>
                                                </Style>
                                            </igDP:FieldSettings.CellValuePresenterStyle>
                                        </igDP:FieldSettings>
                                    </igDP:UnboundField.Settings>
                                </igDP:UnboundField>




                            </igDP:FieldLayout.Fields>
                        </igDP:FieldLayout>
                    </igDP:XamDataGrid.FieldLayouts>

                </igDP:XamDataGrid>

             
    
            </Grid>
            <!-- ************************************************************* -->
            <!-- ************************************************************* -->

            <!-- BOTTOM Panel - RunTime Image Grid -->
            <Grid Grid.Row="2"  HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
                <Grid.RowDefinitions>
                    <RowDefinition Height="*"/>
                    <RowDefinition Height="30"/>
                </Grid.RowDefinitions>

                <Grid.Style>
                    <Style TargetType="{x:Type Grid}">
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding Path=RunState}" Value="{x:Static myLocal:ViewModel_RunExperimentControl+RUN_STATE.NEEDS_INPUT}">
                                <Setter Property="Visibility" Value="Collapsed"/>
                            </DataTrigger>
                            <DataTrigger Binding="{Binding Path=RunState}" Value="{x:Static myLocal:ViewModel_RunExperimentControl+RUN_STATE.READY_TO_RUN}">
                                <Setter Property="Visibility" Value="Collapsed"/>
                            </DataTrigger>
                            <DataTrigger Binding="{Binding Path=RunState}" Value="{x:Static myLocal:ViewModel_RunExperimentControl+RUN_STATE.RUNNING}">
                                <Setter Property="Visibility" Value="Visible"/>
                            </DataTrigger>
                            <DataTrigger Binding="{Binding Path=RunState}" Value="{x:Static myLocal:ViewModel_RunExperimentControl+RUN_STATE.RUN_FINISHED}">
                                <Setter Property="Visibility" Value="Visible"/>
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </Grid.Style>



                <Grid Grid.Row="0" x:Name="RunTimeImageGrid" Panel.ZIndex="0" >
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="*"/>
                        <ColumnDefinition Width="30"/>
                    </Grid.ColumnDefinitions>
                    
                    <Grid Grid.Column="0" Name="ImageGrid" ></Grid>                                      
                   
                    <Image Grid.Column="1" Name="ColorMapImage" Stretch="Fill" Margin="3" Source="{Binding}" MouseLeftButtonUp="ColorMapImage_MouseLeftButtonUp"/>                    
                </Grid>

                <ig:XamNumericRangeSlider Grid.Row="1" x:Name="RangeSlider" MinValue="0" MaxValue="100"  
                                          TrackFillDragCompleted="RangeSlider_TrackFillDragCompleted"
                                          IsSelectionRangeEnabled="True" 
                                          IncreaseButtonVisibility="Collapsed" 
                                          DecreaseButtonVisibility="Collapsed"  
                                          VerticalAlignment="Bottom" Margin="25,0,25,0"
                                          DataContext="{Binding}">
                    <ig:XamSliderNumericThumb Value="{Binding Path=RangeMin}" Name="RangeMinThumb" 
                                              Style="{StaticResource LeftThumbStyle}"  
                                              DragCompleted="RangeMinThumb_DragCompleted" />
                    <ig:XamSliderNumericThumb Value="{Binding Path=RangeMax}" Name="RangeMaxThumb" 
                                              Style="{StaticResource RightThumbStyle}" 
                                              DragCompleted="RangeMaxThumb_DragCompleted" />
                </ig:XamNumericRangeSlider>

            </Grid>

            <!-- BOTTOM Panel - RunTime Auto-Verify (Auto Optimization) -->
            <Grid Grid.Row="2"  HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Panel.ZIndex="5">                
                <Grid.Style>
                    <Style TargetType="{x:Type Grid}">
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding Path=RunningAutoVerify,UpdateSourceTrigger=PropertyChanged,Mode=OneWay}" Value="True">
                                <Setter Property="Visibility" Value="Visible"/>
                            </DataTrigger>
                            <DataTrigger Binding="{Binding Path=RunningAutoVerify,UpdateSourceTrigger=PropertyChanged,Mode=OneWay}" Value="False">
                                <Setter Property="Visibility" Value="Collapsed"/>
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </Grid.Style>
                <Grid.RowDefinitions>
                    <RowDefinition Height="*"/>
                    <RowDefinition Height="25"/>
                </Grid.RowDefinitions>

                <WpfTools:AutoOptimizeViewerControl Grid.Row="0" x:Name="AutoOptimizeViewer" HorizontalAlignment="Stretch" VerticalAlignment="Stretch"/>
                
                <Button Grid.Row="1" x:Name="HideAutoOptimizeViewer" HorizontalAlignment="Right" VerticalAlignment="Center" Margin="0,0,10,0" Content="Hide" Width="60" Height="22" Click="HideAutoOptimizeViewer_Click"/>

            </Grid>



            <Grid Grid.Row="3" x:Name="ButtonGrid">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*"/>
                    <ColumnDefinition Width="100"/>
                    <ColumnDefinition Width="100"/>
                    <ColumnDefinition Width="100"/>
                    <ColumnDefinition Width="100"/>
                    <ColumnDefinition Width="100"/>
                    <ColumnDefinition Width="140"/>
                </Grid.ColumnDefinitions>
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="*"/>
                </Grid.RowDefinitions>


                <!--<Image Grid.Row="1" Grid.Column="0" x:Name="EnclosureCameraPB"
                           HorizontalAlignment="Center" VerticalAlignment="Center"
                             Source="/Images/eye.png" MouseLeftButtonUp="EnclosureCameraPB_MouseLeftButtonUp"/>-->
                
                <TextBlock Grid.Row="0" Grid.Column="0" Grid.RowSpan="2" Text="{Binding Path=RunStateText,UpdateSourceTrigger=PropertyChanged,Mode=OneWay}"
                           HorizontalAlignment="Center" VerticalAlignment="Center" FontSize="14" FontWeight="Bold" />

                <Label Grid.Row="0" Grid.Column="1" Content="Plate #"
                       HorizontalAlignment="Center" 
                       VerticalAlignment="Center"
                       FontSize="18" FontWeight="Bold" 
                       />


                <TextBlock Grid.Row="1" Grid.Column="1" 
                       HorizontalAlignment="Center" VerticalAlignment="Stretch" Margin="10,0,0,0"
                       Text="{Binding Path=CurrentPlateNumberText}"                 
                       FontSize="32"
                       FontWeight="Bold"
                       />


                <Label Grid.Row="0" Grid.Column="2" Content="Pause" x:Name="DelayHeader"
                       HorizontalAlignment="Center" 
                       VerticalAlignment="Center"
                       FontSize="18" FontWeight="Bold"                                              
                       Visibility="{Binding Path=DelayHeaderVisible, Converter={StaticResource BoolToVis}, FallbackValue=Hidden}"
                       />


                <TextBlock Grid.Row="1" Grid.Column="2" x:Name="DelayDisplay"
                       HorizontalAlignment="Center" VerticalAlignment="Stretch"
                       Text="{Binding Path=DelayText}"
                       Visibility="{Binding Path=DelayHeaderVisible, Converter={StaticResource BoolToVis}, FallbackValue=Hidden}"                       
                       FontSize="32"
                       FontWeight="Bold"
                       />


                <Button Grid.Row="0" Grid.Column="3" Grid.RowSpan="2" x:Name="ResetPB"
                    HorizontalAlignment="Center" VerticalAlignment="Center"
                    Width="80" Height="60"
                    Content="Reset" FontSize="28" HorizontalContentAlignment="Center" VerticalContentAlignment="Center"
                    Click="ResetPB_Click"                                       
                    >
                    <Button.Style>
                        <Style TargetType="Button">
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding Path=RunState}" Value="{x:Static myLocal:ViewModel_RunExperimentControl+RUN_STATE.RUN_FINISHED}">
                                    <Setter Property="Visibility" Value="Visible"/>
                                </DataTrigger>
                                <DataTrigger Binding="{Binding Path=RunState}" Value="{x:Static myLocal:ViewModel_RunExperimentControl+RUN_STATE.NEEDS_INPUT}">
                                    <Setter Property="Visibility" Value="Collapsed"/>
                                </DataTrigger>
                                <DataTrigger Binding="{Binding Path=RunState}" Value="{x:Static myLocal:ViewModel_RunExperimentControl+RUN_STATE.READY_TO_RUN}">
                                    <Setter Property="Visibility" Value="Collapsed"/>
                                </DataTrigger>
                                <DataTrigger Binding="{Binding Path=RunState}" Value="{x:Static myLocal:ViewModel_RunExperimentControl+RUN_STATE.RUNNING}">
                                    <Setter Property="Visibility" Value="Collapsed"/>
                                </DataTrigger>
                                <DataTrigger Binding="{Binding Path=RunState}" Value="{x:Static myLocal:ViewModel_RunExperimentControl+RUN_STATE.RUN_ABORTED}">
                                    <Setter Property="Visibility" Value="Visible"/>
                                </DataTrigger>
                                <DataTrigger Binding="{Binding Path=RunState}" Value="{x:Static myLocal:ViewModel_RunExperimentControl+RUN_STATE.ERROR}">
                                    <Setter Property="Visibility" Value="Collapsed"/>
                                </DataTrigger>

                            </Style.Triggers>
                        </Style>
                    </Button.Style>
                </Button>



                <Button Grid.Row="0" Grid.Column="4" Grid.RowSpan="2" x:Name="ClosePB" 
                    HorizontalAlignment="Center" VerticalAlignment="Center"
                    Width="80" Height="60"                            
                    FontSize="28" HorizontalContentAlignment="Center" VerticalContentAlignment="Center"
                    Click="ClosePB_Click"
                    >
                    <Button.Style>
                        <Style TargetType="Button">
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding Path=RunState}" Value="{x:Static myLocal:ViewModel_RunExperimentControl+RUN_STATE.RUN_FINISHED}">
                                    <Setter Property="Visibility" Value="Visible"/>
                                    <Setter Property="Content" Value="Close"/>
                                </DataTrigger>
                                <DataTrigger Binding="{Binding Path=RunState}" Value="{x:Static myLocal:ViewModel_RunExperimentControl+RUN_STATE.NEEDS_INPUT}">
                                    <Setter Property="Visibility" Value="Visible"/>
                                    <Setter Property="Content" Value="Close"/>
                                </DataTrigger>
                                <DataTrigger Binding="{Binding Path=RunState}" Value="{x:Static myLocal:ViewModel_RunExperimentControl+RUN_STATE.READY_TO_RUN}">
                                    <Setter Property="Visibility" Value="Visible"/>
                                    <Setter Property="Content" Value="Close"/>
                                </DataTrigger>
                                <DataTrigger Binding="{Binding Path=RunState}" Value="{x:Static myLocal:ViewModel_RunExperimentControl+RUN_STATE.RUNNING}">
                                    <Setter Property="Visibility" Value="Collapsed"/>
                                    <Setter Property="Content" Value="Close"/>
                                </DataTrigger>
                                <DataTrigger Binding="{Binding Path=RunState}" Value="{x:Static myLocal:ViewModel_RunExperimentControl+RUN_STATE.RUN_ABORTED}">
                                    <Setter Property="Visibility" Value="Visible"/>
                                    <Setter Property="Content" Value="Close"/>
                                </DataTrigger>
                                <DataTrigger Binding="{Binding Path=RunState}" Value="{x:Static myLocal:ViewModel_RunExperimentControl+RUN_STATE.ERROR}">
                                    <Setter Property="Visibility" Value="Visible"/>
                                    <Setter Property="Content" Value="Close"/>
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </Button.Style>
                </Button>


                <Button Grid.Row="0" Grid.Column="5" Grid.RowSpan="2" x:Name="RunPB" 
                    HorizontalAlignment="Center" VerticalAlignment="Center"
                    Width="80" Height="60"
                    FontSize="28" HorizontalContentAlignment="Center" VerticalContentAlignment="Center"
                    Click="RunPB_Click"
                    >
                    <Button.Style>
                        <Style TargetType="Button">
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding Path=RunState}" Value="{x:Static myLocal:ViewModel_RunExperimentControl+RUN_STATE.RUN_FINISHED}">
                                    <Setter Property="Visibility" Value="Collapsed"/>
                                    <Setter Property="Content" Value=""/>
                                </DataTrigger>
                                <DataTrigger Binding="{Binding Path=RunState}" Value="{x:Static myLocal:ViewModel_RunExperimentControl+RUN_STATE.NEEDS_INPUT}">
                                    <Setter Property="Visibility" Value="Collapsed"/>
                                    <Setter Property="Content" Value=""/>
                                </DataTrigger>
                                <DataTrigger Binding="{Binding Path=RunState}" Value="{x:Static myLocal:ViewModel_RunExperimentControl+RUN_STATE.READY_TO_RUN}">
                                    <Setter Property="Visibility" Value="Visible"/>
                                    <Setter Property="Content" Value="Run"/>
                                </DataTrigger>
                                <DataTrigger Binding="{Binding Path=RunState}" Value="{x:Static myLocal:ViewModel_RunExperimentControl+RUN_STATE.RUNNING}">
                                    <Setter Property="Visibility" Value="Visible"/>
                                    <Setter Property="Content" Value="Abort"/>
                                </DataTrigger>
                                <DataTrigger Binding="{Binding Path=RunState}" Value="{x:Static myLocal:ViewModel_RunExperimentControl+RUN_STATE.RUN_ABORTED}">
                                    <Setter Property="Visibility" Value="Collapsed"/>
                                    <Setter Property="Content" Value=""/>
                                </DataTrigger>
                                <DataTrigger Binding="{Binding Path=RunState}" Value="{x:Static myLocal:ViewModel_RunExperimentControl+RUN_STATE.ERROR}">
                                    <Setter Property="Visibility" Value="Collapsed"/>
                                    <Setter Property="Content" Value=""/>
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </Button.Style>
                </Button>


                <Image Grid.Row="0" Grid.Column="6" Grid.RowSpan="2" x:Name="RunStateImage" RenderTransformOrigin="0.5,0.5">
                    <Image.RenderTransform>
                        <RotateTransform Angle="0"/>
                    </Image.RenderTransform>
                    <Image.Style>
                        <Style TargetType="{x:Type Image}">
                            <Style.Triggers>

                                <DataTrigger Binding="{Binding Path=RunState}" Value="{x:Static myLocal:ViewModel_RunExperimentControl+RUN_STATE.READY_TO_RUN}">
                                    <Setter Property="Source" Value="/Images/blank.png"/>
                                </DataTrigger>

                                <DataTrigger Binding="{Binding Path=RunState}" Value="{x:Static myLocal:ViewModel_RunExperimentControl+RUN_STATE.RUNNING}">
                                    <Setter Property="Source" Value="/Images/refresh.png"/>

                                    <DataTrigger.EnterActions>
                                        <BeginStoryboard x:Name="RotateAnimation_BeginStoryboard">
                                            <Storyboard>
                                                <StaticResource ResourceKey="RotateAnimation"/>
                                            </Storyboard>
                                        </BeginStoryboard>
                                    </DataTrigger.EnterActions>

                                </DataTrigger>

                                <DataTrigger Binding="{Binding Path=RunState}" Value="{x:Static myLocal:ViewModel_RunExperimentControl+RUN_STATE.RUN_ABORTED}">
                                    <Setter Property="Source" Value="/Images/red_x.png"/>
                                    <DataTrigger.EnterActions>
                                        <StopStoryboard BeginStoryboardName="RotateAnimation_BeginStoryboard"/>
                                    </DataTrigger.EnterActions>
                                </DataTrigger>

                                <DataTrigger Binding="{Binding Path=RunState}" Value="{x:Static myLocal:ViewModel_RunExperimentControl+RUN_STATE.RUN_FINISHED}">
                                    <Setter Property="Source" Value="/Images/green_check.png"/>
                                    <DataTrigger.EnterActions>
                                        <StopStoryboard BeginStoryboardName="RotateAnimation_BeginStoryboard"/>
                                    </DataTrigger.EnterActions>
                                </DataTrigger>

                            </Style.Triggers>
                        </Style>
                    </Image.Style>

                </Image>




            </Grid>
            
            
            
           
            
            

        </Grid>

        
    </Grid> <!-- END MainGrid -->
</UserControl>
